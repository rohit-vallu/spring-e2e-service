plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'checkstyle'
    id 'jacoco'
    id "org.sonarqube" version "4.3.0.3225"
}

group = build_group
version = build_version

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

test {
    afterTest { desc, result ->
        logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }

    useJUnitPlatform()

    jacoco {
        enabled = true
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)  // Ensure XML report is enabled
        html.required.set(true)
        xml.destination file("${buildDir}/reports/jacoco.xml")
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

checkstyle {
    toolVersion = '8.35'
    ignoreFailures = false
    maxWarnings = 0
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", System.getenv("SONAR_PROJECT_KEY")
        property "sonar.host.url", System.getenv("SONAR_HOST_URL")
        property "sonar.login", System.getenv("SONAR_TOKEN")
    }
}

